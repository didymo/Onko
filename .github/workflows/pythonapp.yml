name: Python application

on: [push, pull_request]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        python: ['3.9', '3.10']
    runs-on: ubuntu-20.04
    timeout-minutes: 60

    env:
      DISPLAY: ':99.0'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python }}
        # cache: 'pip'

    - name: Install plastimatch
      run: |
       sudo apt-get install plastimatch

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        pip install -r pre-requirements.txt
        pip install -r requirements.txt
        pip install -r dev-requirements.txt

    - name: Linting setup
      run: |
        pip install flake8

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - uses: actions/cache/restore@v3
      name: restore test data
      id: restore
      with:
        path: ~/DICOM-RT-02.zip
        # remember to update the key when changing the test dataset
        key: 'https://zenodo.org/record/5147737/files/DICOM-RT-02.zip'

    - name: download test data
      if: steps.restore.outputs.cache-hit != 'true'
      run: |
        sudo apt-get install wget
        wget -P ~ https://zenodo.org/record/5147737/files/DICOM-RT-02.zip

    # save the test data to cache ASAP, even when the entire workflow fail
    - name: save new cache
      uses: actions/cache/save@v3
      if: steps.restore.outputs.cache-hit != 'true'
      with:
        path: ~/DICOM-RT-02.zip
        # remember to update the key when changing the test dataset
        key: 'https://zenodo.org/record/5147737/files/DICOM-RT-02.zip'

    - name: install test data
      run: |
        sudo apt-get install unzip
        mkdir test/testdata
        mkdir test/batchtestdata
        unzip ~/DICOM-RT-02.zip -d test/testdata
        unzip ~/DICOM-RT-02.zip -d test/batchtestdata
        sudo chmod -R 777 test/testdata
        sudo chmod -R 777 test/batchtestdata

    - name: Testing setup
      run: |
        pip install pytest-xvfb pytest-cov
        sudo apt-get update
        sudo apt-get install xvfb libxkbcommon-x11-0 herbstluftwm libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0 libopengl0 freeglut3 freeglut3-dev
        # sudo Xvfb :1 -screen 0 1024x768x24 </dev/null &
        /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1920x1200x24 -ac +extension GLX
        sleep 3
        herbstluftwm &
        sleep 1

    - name: Testing and Coverage with pytest
      run: |
        # Append this for fail under x percent "--cov-fail-under=80"
        python -m pytest "test/" -v --durations=10 --cov-config=.coveragerc --cov-report term-missing --cov=.
